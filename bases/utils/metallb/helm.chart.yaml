apiVersion: wolfs.io/v1beta1
kind: HelmChart
metadata:
  name: metallb
  namespace: utils

chart:
  git: https://github.com/bitnami/charts.git
  ref: master
  path: bitnami/metallb/

values:
  # https://github.com/metallb/metallb-helm-chart/blob/master/metallb/values.yaml
  # Default values for metallb.

  # Global Docker image parameters
  # Please, note that this will override the image parameters, including dependencies, configured to use the global value
  # Current available global Docker image parameters: imageRegistry, imagePullSecrets
  #
  # global:
  #   imageRegistry: myRegistryName
  #   imagePullSecrets:
  #     - myRegistryKeySecretName

  # To configure MetalLB, you must specify ONE of the following two
  # options.
  #
  # existingConfigMap specifies the name of an externally-defined
  # ConfigMap to use as the configuration. Helm will not manage the
  # contents of this ConfigMap, it is your responsibility to create it.
  #
  # existingConfigMap: metallb-config
  #
  # configInline specifies MetalLB's configuration directly, in yaml
  # format. When configInline is used, Helm manages MetalLB's
  # configuration ConfigMap as part of the release, and
  # existingConfigMap is ignored.
  # Refer to https://metallb.universe.tf/configuration/ for
  # available options.
  #
  configInline: |
    address-pools:
    - name: default
      protocol: layer2
      addresses:
        - 10.40.0.90-10.40.0.200

  # String to partially override metallb.fullname include (will maintain the release name)
  #
  # nameOverride:

  # String to fully override metallb.fullname template
  #
  # fullnameOverride:

  # RBAC creation for controller and speaker
  #
  rbac:
    # create specifies whether to install and use RBAC rules.
    #
    create: true

  # Prometheus Operator alertmanager alerts
  networkPolicy:
    # Specifies whether a NetworkPolicy should be created.
    # Prometheus scraping of the controller
    #
    enabled: true

    # Limit networkpolicy ingress (from)
    # Set label for namespace and pods (optional).
    #
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}

  # Prometheus Operator alertmanager alerts are created.
  #
  prometheusRule:
    enabled: false

  # Metallb Controller deployment.
  # ref: https://hub.docker.com/r/bitnami/metallb-controller/tags
  #
  controller:
    image:
      registry: docker.io
      repository: bitnami/metallb-controller
      tag: "0.10.2"
      pullPolicy: IfNotPresent

    # If global .Values.psp.create is disabled no psp is created.
    # This value is then meaningless
    # Defines if the controller psp should be created.
    #
    psp:
      # create specifies whether to install Pod Security Policies.
      #
      create: true

    # Controller container resource requests and limits
    # ref: http://kubernetes.io/docs/user-guide/compute-resources/
    #
    resources:
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      limits:
        cpu: "0.25"
        memory: 256Mi
      requests:
        cpu: "0.25"
        memory: 32Mi

    # Pod anti-affinity preset
    # ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
    # Allowed values: soft, hard
    #
    podAntiAffinityPreset: soft

    serviceAccount:
      # Specifies whether a ServiceAccount should be created
      create: true

    # Pod securityContext
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    #
    securityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
      fsGroup: 1001
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
          - ALL

    # Configure the revisionHistoryLimit of the Controller deployment
    # ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#revision-history-limit
    #
    revisionHistoryLimit: 3

    # Configure the grace time period for sig term
    # ref: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#hook-handler-execution
    #
    terminationGracePeriodSeconds: 0

    # Configures the ports the MetalLB Controller listens on for metrics
    #
    containerPort:
      metrics: 7472

    # Liveness and readiness probe values
    # ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
    #
    livenessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    readinessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1

    prometheus:
      # Prometheus Operator service monitors
      #
      serviceMonitor:
        # enable support for Prometheus Operator
        #
        enabled: false
        # Job label for scrape target
        #
        jobLabel: "app.kubernetes.io/name"

  # Metallb Speaker daemonset.
  # ref: https://hub.docker.com/r/bitnami/metallb-speaker/tags
  #
  speaker:
    image:
      registry: docker.io
      repository: bitnami/metallb-speaker
      tag: "0.10.2"
      pullPolicy: IfNotPresent

    # Speaker container resource requests and limits
    # ref: http://kubernetes.io/docs/user-guide/compute-resources/
    #
    resources:
      limits:
        cpu: 100m
        memory: 100Mi
      requests:
        memory: 25Mi
        cpu: 25m

    serviceAccount:
      # Specifies whether a ServiceAccount should be created
      create: true

    # Daemonset configuration
    #
    daemonset:
      terminationGracePeriodSeconds: 2
      hostPorts:
        metrics: 7472

    # Pod securityContext
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    #
    securityContext:
      enabled: true
      runAsUser: 0
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
          - ALL
        add:
          - NET_ADMIN
          - NET_RAW
          - SYS_ADMIN

    # Liveness and readiness probe values
    # ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
    #
    livenessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    readinessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1

    prometheus:
      serviceMonitor:
        enabled: true
        jobLabel: "app.kubernetes.io/name"
